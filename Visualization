!apt-get install graphviz
!pip install graphviz
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
from google.colab import files      
uploaded = files.upload()
# Загрузка датасета
df = pd.read_csv('train.csv')

# Обработка пропущенных значений
df['Age'] = df['Age'].fillna(df['Age'].median())
df['Cabin'] = df['Cabin'].fillna('Unknown')
df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])

# Преобразование категориальных переменных
label_encoder = LabelEncoder()
df['Sex'] = label_encoder.fit_transform(df['Sex'])
df['Embarked'] = label_encoder.fit_transform(df['Embarked'])

# Определение признаков и целевой переменной
X = df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]
y = df['Survived']

# Делим данные на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Создание и обучение модели
model = DecisionTreeClassifier(max_depth=3)  # Ограничиваем глубину для лучшей визуализации
model.fit(X_train, y_train)

from sklearn.tree import export_graphviz
import graphviz

# Экспорт дерева в формате Graphviz
dot_data = export_graphviz(model, out_file=None, 
                           feature_names=X.columns,  
                           class_names=['Not Survived', 'Survived'],  
                           filled=True, rounded=True,  
                           special_characters=True)  

# Визуализация дерева
graph = graphviz.Source(dot_data)  
graph.render("titanic_decision_tree")  
graph
